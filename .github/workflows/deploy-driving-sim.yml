name: Deploy Driving Simulator to GitHub Pages

on:
  push:
    branches: [ main ]
    paths: [ 'Driving-Sim/**' ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Verify Secret
        run: |
          echo "=== SECRET VERIFICATION ==="
          if [ -z "${{ secrets.MAPBOX_ACCESS_TOKEN }}" ]; then
            echo "❌ MAPBOX_ACCESS_TOKEN secret is not set or empty"
            exit 1
          else
            echo "✅ MAPBOX_ACCESS_TOKEN secret is available"
            echo "Token length: ${#MAPBOX_ACCESS_TOKEN}"
            echo "Token starts with pk.: $([[ "$MAPBOX_ACCESS_TOKEN" == pk.* ]] && echo "yes" || echo "no")"
          fi
          echo "=========================="
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
        
      - name: Inject Mapbox Token
        run: |
          echo "=== TOKEN INJECTION DEBUG ==="
          echo "Token length: ${#MAPBOX_ACCESS_TOKEN}"
          echo "Token starts with pk.: $([[ "$MAPBOX_ACCESS_TOKEN" == pk.* ]] && echo "yes" || echo "no")"
          echo "Original script.js content (first 10 lines):"
          head -10 Driving-Sim/script.js
          echo "=============================="
          
          # Create a temporary Node.js script for token injection
          cat > inject-token.js << 'EOF'
          const fs = require('fs');
          const token = process.env.MAPBOX_ACCESS_TOKEN;
          
          console.log('Token from env:', token ? token.substring(0, 10) + '...' : 'undefined');
          
          let content = fs.readFileSync('Driving-Sim/script.js', 'utf8');
          console.log('Before replacement - token line:', content.split('\n').find(line => line.includes('mapboxgl.accessToken')));
          
          // Replace the empty token with the actual token
          content = content.replace(/mapboxgl\.accessToken = '';/, `mapboxgl.accessToken = '${token}';`);
          
          console.log('After replacement - token line:', content.split('\n').find(line => line.includes('mapboxgl.accessToken')));
          
          fs.writeFileSync('Driving-Sim/script.js', content);
          console.log('Token injection completed');
          EOF
          
          # Run the injection script
          if ! node inject-token.js; then
            echo "Node.js injection failed, trying sed fallback..."
            # Fallback to sed
            sed -i "s/mapboxgl\.accessToken = '';/mapboxgl.accessToken = '$MAPBOX_ACCESS_TOKEN';/g" Driving-Sim/script.js
            echo "Sed fallback completed"
          fi
          
          # Clean up
          rm -f inject-token.js
          
          echo "=== VERIFICATION ==="
          echo "Updated script.js content (first 10 lines):"
          head -10 Driving-Sim/script.js
          echo "Token line:"
          grep "mapboxgl.accessToken" Driving-Sim/script.js
          echo "===================="
        env:
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: Driving-Sim
          
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
